/*
Ledger API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ledgerclient

import (
	"encoding/json"
	"time"
)

// TransactionCommitError struct for TransactionCommitError
type TransactionCommitError struct {
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	Postings []Posting `json:"postings"`
	Reference *string `json:"reference,omitempty"`
	Timestamp time.Time `json:"timestamp"`
	Txid int32 `json:"txid"`
	ErrorCode *ErrorCode `json:"errorCode,omitempty"`
	ErrorMessage *string `json:"errorMessage,omitempty"`
}

// NewTransactionCommitError instantiates a new TransactionCommitError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionCommitError(postings []Posting, timestamp time.Time, txid int32) *TransactionCommitError {
	this := TransactionCommitError{}
	this.Postings = postings
	this.Timestamp = timestamp
	this.Txid = txid
	return &this
}

// NewTransactionCommitErrorWithDefaults instantiates a new TransactionCommitError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionCommitErrorWithDefaults() *TransactionCommitError {
	this := TransactionCommitError{}
	return &this
}

// GetMetadata returns the Metadata field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionCommitError) GetMetadata() map[string]interface{} {
	if o == nil  {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionCommitError) GetMetadataOk() (*map[string]interface{}, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return &o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *TransactionCommitError) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *TransactionCommitError) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetPostings returns the Postings field value
func (o *TransactionCommitError) GetPostings() []Posting {
	if o == nil {
		var ret []Posting
		return ret
	}

	return o.Postings
}

// GetPostingsOk returns a tuple with the Postings field value
// and a boolean to check if the value has been set.
func (o *TransactionCommitError) GetPostingsOk() (*[]Posting, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Postings, true
}

// SetPostings sets field value
func (o *TransactionCommitError) SetPostings(v []Posting) {
	o.Postings = v
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *TransactionCommitError) GetReference() string {
	if o == nil || o.Reference == nil {
		var ret string
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionCommitError) GetReferenceOk() (*string, bool) {
	if o == nil || o.Reference == nil {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *TransactionCommitError) HasReference() bool {
	if o != nil && o.Reference != nil {
		return true
	}

	return false
}

// SetReference gets a reference to the given string and assigns it to the Reference field.
func (o *TransactionCommitError) SetReference(v string) {
	o.Reference = &v
}

// GetTimestamp returns the Timestamp field value
func (o *TransactionCommitError) GetTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *TransactionCommitError) GetTimestampOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *TransactionCommitError) SetTimestamp(v time.Time) {
	o.Timestamp = v
}

// GetTxid returns the Txid field value
func (o *TransactionCommitError) GetTxid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Txid
}

// GetTxidOk returns a tuple with the Txid field value
// and a boolean to check if the value has been set.
func (o *TransactionCommitError) GetTxidOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Txid, true
}

// SetTxid sets field value
func (o *TransactionCommitError) SetTxid(v int32) {
	o.Txid = v
}

// GetErrorCode returns the ErrorCode field value if set, zero value otherwise.
func (o *TransactionCommitError) GetErrorCode() ErrorCode {
	if o == nil || o.ErrorCode == nil {
		var ret ErrorCode
		return ret
	}
	return *o.ErrorCode
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionCommitError) GetErrorCodeOk() (*ErrorCode, bool) {
	if o == nil || o.ErrorCode == nil {
		return nil, false
	}
	return o.ErrorCode, true
}

// HasErrorCode returns a boolean if a field has been set.
func (o *TransactionCommitError) HasErrorCode() bool {
	if o != nil && o.ErrorCode != nil {
		return true
	}

	return false
}

// SetErrorCode gets a reference to the given ErrorCode and assigns it to the ErrorCode field.
func (o *TransactionCommitError) SetErrorCode(v ErrorCode) {
	o.ErrorCode = &v
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise.
func (o *TransactionCommitError) GetErrorMessage() string {
	if o == nil || o.ErrorMessage == nil {
		var ret string
		return ret
	}
	return *o.ErrorMessage
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionCommitError) GetErrorMessageOk() (*string, bool) {
	if o == nil || o.ErrorMessage == nil {
		return nil, false
	}
	return o.ErrorMessage, true
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *TransactionCommitError) HasErrorMessage() bool {
	if o != nil && o.ErrorMessage != nil {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given string and assigns it to the ErrorMessage field.
func (o *TransactionCommitError) SetErrorMessage(v string) {
	o.ErrorMessage = &v
}

func (o TransactionCommitError) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if true {
		toSerialize["postings"] = o.Postings
	}
	if o.Reference != nil {
		toSerialize["reference"] = o.Reference
	}
	if true {
		toSerialize["timestamp"] = o.Timestamp
	}
	if true {
		toSerialize["txid"] = o.Txid
	}
	if o.ErrorCode != nil {
		toSerialize["errorCode"] = o.ErrorCode
	}
	if o.ErrorMessage != nil {
		toSerialize["errorMessage"] = o.ErrorMessage
	}
	return json.Marshal(toSerialize)
}

type NullableTransactionCommitError struct {
	value *TransactionCommitError
	isSet bool
}

func (v NullableTransactionCommitError) Get() *TransactionCommitError {
	return v.value
}

func (v *NullableTransactionCommitError) Set(val *TransactionCommitError) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionCommitError) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionCommitError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionCommitError(val *TransactionCommitError) *NullableTransactionCommitError {
	return &NullableTransactionCommitError{value: val, isSet: true}
}

func (v NullableTransactionCommitError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionCommitError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


