/*
Ledger API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ledgerclient

import (
	"encoding/json"
)

// TransactionCommitErrorResponse struct for TransactionCommitErrorResponse
type TransactionCommitErrorResponse struct {
	Data []TransactionCommitError `json:"data"`
}

// NewTransactionCommitErrorResponse instantiates a new TransactionCommitErrorResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionCommitErrorResponse(data []TransactionCommitError) *TransactionCommitErrorResponse {
	this := TransactionCommitErrorResponse{}
	this.Data = data
	return &this
}

// NewTransactionCommitErrorResponseWithDefaults instantiates a new TransactionCommitErrorResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionCommitErrorResponseWithDefaults() *TransactionCommitErrorResponse {
	this := TransactionCommitErrorResponse{}
	return &this
}

// GetData returns the Data field value
func (o *TransactionCommitErrorResponse) GetData() []TransactionCommitError {
	if o == nil {
		var ret []TransactionCommitError
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *TransactionCommitErrorResponse) GetDataOk() (*[]TransactionCommitError, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *TransactionCommitErrorResponse) SetData(v []TransactionCommitError) {
	o.Data = v
}

func (o TransactionCommitErrorResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableTransactionCommitErrorResponse struct {
	value *TransactionCommitErrorResponse
	isSet bool
}

func (v NullableTransactionCommitErrorResponse) Get() *TransactionCommitErrorResponse {
	return v.value
}

func (v *NullableTransactionCommitErrorResponse) Set(val *TransactionCommitErrorResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionCommitErrorResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionCommitErrorResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionCommitErrorResponse(val *TransactionCommitErrorResponse) *NullableTransactionCommitErrorResponse {
	return &NullableTransactionCommitErrorResponse{value: val, isSet: true}
}

func (v NullableTransactionCommitErrorResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionCommitErrorResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


